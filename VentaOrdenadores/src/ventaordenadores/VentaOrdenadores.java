/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventaordenadores;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author alumno
 */
public class VentaOrdenadores extends javax.swing.JFrame {

    public ArrayList<Venta> ventasGuardadas = new ArrayList<Venta>();
    public int auxBusqueda=0;
    DefaultListModel<Object> modelo = new DefaultListModel();
    File f= new File("Ventas");
    public ArrayList<Venta> listaAuxiliar = new ArrayList<Venta>();
    /**
     * Creates new form VentaOrdenadores
     */
    public VentaOrdenadores() {
        initComponents();
        estadoInicial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupProcesador = new javax.swing.ButtonGroup();
        buttonGroupMemoria = new javax.swing.ButtonGroup();
        buttonGroupMonitor = new javax.swing.ButtonGroup();
        buttonGroupDiscoDuro = new javax.swing.ButtonGroup();
        jLabelNombreCliente = new javax.swing.JLabel();
        jTextFieldNombreCliente = new javax.swing.JTextField();
        jLabelLocalidad = new javax.swing.JLabel();
        jComboBoxLocalidad = new javax.swing.JComboBox();
        jLabelProcesador = new javax.swing.JLabel();
        jRadioButtonProc1 = new javax.swing.JRadioButton();
        jRadioButtonProc2 = new javax.swing.JRadioButton();
        jRadioButtonProc3 = new javax.swing.JRadioButton();
        jRadioButtonProc4 = new javax.swing.JRadioButton();
        jLabelMemoria = new javax.swing.JLabel();
        jRadioButtonMem1 = new javax.swing.JRadioButton();
        jRadioButtonMem2 = new javax.swing.JRadioButton();
        jRadioButtonMem3 = new javax.swing.JRadioButton();
        jRadioButtonMem4 = new javax.swing.JRadioButton();
        jLabelMonitor = new javax.swing.JLabel();
        jRadioButtonMon1 = new javax.swing.JRadioButton();
        jRadioButtonMon2 = new javax.swing.JRadioButton();
        jRadioButtonMon3 = new javax.swing.JRadioButton();
        jRadioButtonMon4 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButtonDis1 = new javax.swing.JRadioButton();
        jRadioButtonDis2 = new javax.swing.JRadioButton();
        jRadioButtonDis3 = new javax.swing.JRadioButton();
        jRadioButtonDis4 = new javax.swing.JRadioButton();
        jLabelOpciones = new javax.swing.JLabel();
        jCheckBoxGrabadora = new javax.swing.JCheckBox();
        jCheckBoxWifi = new javax.swing.JCheckBox();
        jCheckBoxSintonizador = new javax.swing.JCheckBox();
        jCheckBoxBackupRestore = new javax.swing.JCheckBox();
        jButtonAnadir = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList();
        jLabelListaClientes = new javax.swing.JLabel();
        jButtonMostrarV = new javax.swing.JButton();
        jButtonGuardarV = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ventas de ordenadores");

        jLabelNombreCliente.setText("Nombre del cliente");

        jTextFieldNombreCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldNombreClienteMouseClicked(evt);
            }
        });
        jTextFieldNombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNombreClienteActionPerformed(evt);
            }
        });
        jTextFieldNombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNombreClienteKeyPressed(evt);
            }
        });

        jLabelLocalidad.setText("Localidad");

        jComboBoxLocalidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Villalba", "Alpedrete", "Galapagar", "Guadarrama", "Moralzarzal" }));

        jLabelProcesador.setText("Procesador");

        buttonGroupProcesador.add(jRadioButtonProc1);
        jRadioButtonProc1.setText("P4 3.0 Gb");

        buttonGroupProcesador.add(jRadioButtonProc2);
        jRadioButtonProc2.setText("P4 3.2 Gb");

        buttonGroupProcesador.add(jRadioButtonProc3);
        jRadioButtonProc3.setText("P4 Celeron");

        buttonGroupProcesador.add(jRadioButtonProc4);
        jRadioButtonProc4.setText("AMD 650");

        jLabelMemoria.setText("Memoria");

        buttonGroupMemoria.add(jRadioButtonMem1);
        jRadioButtonMem1.setText("128 Mb");

        buttonGroupMemoria.add(jRadioButtonMem2);
        jRadioButtonMem2.setText("256 Mb");

        buttonGroupMemoria.add(jRadioButtonMem3);
        jRadioButtonMem3.setText("512 Mb");

        buttonGroupMemoria.add(jRadioButtonMem4);
        jRadioButtonMem4.setText("1024 Mb");

        jLabelMonitor.setText("Monitor");

        buttonGroupMonitor.add(jRadioButtonMon1);
        jRadioButtonMon1.setText("15\"");

        buttonGroupMonitor.add(jRadioButtonMon2);
        jRadioButtonMon2.setText("17\"");

        buttonGroupMonitor.add(jRadioButtonMon3);
        jRadioButtonMon3.setText("TFT 15\"");

        buttonGroupMonitor.add(jRadioButtonMon4);
        jRadioButtonMon4.setText("TFT 17\"");

        jLabel2.setText("Disco Duro");

        buttonGroupDiscoDuro.add(jRadioButtonDis1);
        jRadioButtonDis1.setText("60 Gb");

        buttonGroupDiscoDuro.add(jRadioButtonDis2);
        jRadioButtonDis2.setText("80 Gb");

        buttonGroupDiscoDuro.add(jRadioButtonDis3);
        jRadioButtonDis3.setText("120 Gb");

        buttonGroupDiscoDuro.add(jRadioButtonDis4);
        jRadioButtonDis4.setText("200 Gb");

        jLabelOpciones.setText("Opciones");

        jCheckBoxGrabadora.setText("Grabadora DVD");
        jCheckBoxGrabadora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxGrabadoraActionPerformed(evt);
            }
        });

        jCheckBoxWifi.setText("Wifi");

        jCheckBoxSintonizador.setText("Sintonizador TV");

        jCheckBoxBackupRestore.setText("Backup/Restore");

        jButtonAnadir.setMnemonic('a');
        jButtonAnadir.setText("AÃ±adir");
        jButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });

        jButtonBuscar.setMnemonic('b');
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonEliminar.setMnemonic('e');
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonCancelar.setMnemonic('c');
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonSalir.setMnemonic('s');
        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jListClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClientesMouseClicked(evt);
            }
        });
        jListClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListClientesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jListClientes);

        jLabelListaClientes.setText("Lista de clientes");

        jButtonMostrarV.setMnemonic('m');
        jButtonMostrarV.setText("Mostrar ventas");
        jButtonMostrarV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarVActionPerformed(evt);
            }
        });

        jButtonGuardarV.setMnemonic('g');
        jButtonGuardarV.setText("Guardar ventas");
        jButtonGuardarV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNombreCliente)
                            .addComponent(jLabelLocalidad)
                            .addComponent(jLabelProcesador)
                            .addComponent(jRadioButtonProc1)
                            .addComponent(jRadioButtonProc2)
                            .addComponent(jRadioButtonProc3)
                            .addComponent(jRadioButtonProc4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelMemoria)
                                            .addComponent(jRadioButtonMem1)
                                            .addComponent(jRadioButtonMem2)
                                            .addComponent(jRadioButtonMem3)
                                            .addComponent(jRadioButtonMem4, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(52, 52, 52)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(jLabelMonitor))
                                            .addComponent(jRadioButtonMon1)
                                            .addComponent(jRadioButtonMon2)
                                            .addComponent(jRadioButtonMon3)
                                            .addComponent(jRadioButtonMon4))
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jRadioButtonDis1)
                                            .addComponent(jRadioButtonDis2)
                                            .addComponent(jRadioButtonDis3)
                                            .addComponent(jRadioButtonDis4)))
                                    .addComponent(jComboBoxLocalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelListaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelOpciones)
                                        .addComponent(jCheckBoxWifi)
                                        .addComponent(jCheckBoxGrabadora)
                                        .addComponent(jCheckBoxSintonizador)))
                                .addComponent(jCheckBoxBackupRestore))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonAnadir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonMostrarV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGuardarV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNombreCliente)
                            .addComponent(jTextFieldNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelListaClientes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelLocalidad)
                            .addComponent(jComboBoxLocalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelProcesador)
                            .addComponent(jLabelMemoria)
                            .addComponent(jLabelMonitor)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonProc1)
                            .addComponent(jRadioButtonMem1)
                            .addComponent(jRadioButtonMon1)
                            .addComponent(jRadioButtonDis1))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonMon2)
                            .addComponent(jRadioButtonDis2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonMon3)
                            .addComponent(jRadioButtonDis3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButtonMon4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jRadioButtonMem4))
                            .addComponent(jRadioButtonDis4))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAnadir)
                            .addComponent(jButtonBuscar)
                            .addComponent(jButtonEliminar)
                            .addComponent(jButtonMostrarV)
                            .addComponent(jButtonGuardarV))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelOpciones)
                                .addGap(14, 14, 14)
                                .addComponent(jCheckBoxGrabadora)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBoxWifi))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButtonProc2)
                                .addComponent(jRadioButtonMem2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxSintonizador)
                            .addComponent(jRadioButtonProc3)
                            .addComponent(jRadioButtonMem3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxBackupRestore)
                            .addComponent(jRadioButtonProc4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalir)
                        .addContainerGap(57, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxGrabadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxGrabadoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxGrabadoraActionPerformed

    private void jTextFieldNombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNombreClienteActionPerformed

    private void jTextFieldNombreClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNombreClienteKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10)
        {
            if(jTextFieldNombreCliente.getText().equals(""))
            {
                JOptionPane.showMessageDialog(this, "La caja de texto no puede estar vacÃ­a.", "ERROR.", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                if(jTextFieldNombreCliente.getText().length()>15)
                {
                    JOptionPane.showMessageDialog(this, "La caja de texto no admite mÃ¡s de 15 caracteres.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                }
                else{
                    if(!jTextFieldNombreCliente.getText().matches("[a-zA-Z Ã¡Ã©Ã­Ã³ÃºÃÃÃÃÃ\\s]{1,15}")){
                        JOptionPane.showMessageDialog(this, "La caja de texto solo admite caracteres(no acepta guiones, ni puntos, ni nÃºmeros, etc).", "ERROR.", JOptionPane.ERROR_MESSAGE);
                        estadoInicial();
                    }else
                    {
                        estadoPostNombreClienteCorrecto();
                    }
                }
            }
        }
    }//GEN-LAST:event_jTextFieldNombreClienteKeyPressed

    private void jButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnadirActionPerformed
        // TODO add your handling code here:
        jListClientes.setListData(actualizarListaClientes(jTextFieldNombreCliente.getText()));
        estadoInicial();
    }//GEN-LAST:event_jButtonAnadirActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        //Comprueba si hay ventas guardadas y si no hay ventas devuelve mensaje informativo.
        auxBusqueda=0;
        if(ventasGuardadas.isEmpty()){
            JOptionPane.showMessageDialog(this, "No hay ventas guardadas.", "ERROR.", JOptionPane.ERROR_MESSAGE);//Mensaje informativo.
        }
        else
        {
            try {
                pintaVenta(dameVentaCliente(jTextFieldNombreCliente.getText(),auxBusqueda));
                try{
                if(!masDeUno(jTextFieldNombreCliente.getText())){
                    throw new Exception();
                }
                auxBusqueda++;
                while(true)
                {
                    boolean salir = false;
                    int opcion=JOptionPane.showConfirmDialog(null, "Â¿Quiere seguir mostrando ventas de este cliente?","Â¿Continuar?",JOptionPane.OK_CANCEL_OPTION);//Devuelve un valor entero segÃºn la opciÃ³n que escojamos de la ventana.
                    switch(opcion)
                    {
                            case JOptionPane.OK_OPTION://Si das a "aceptar" en la ventana anterior muestra este mensaje.
                                    pintaVenta(dameVentaCliente(jTextFieldNombreCliente.getText(),auxBusqueda));
                                    break;
                            case JOptionPane.CANCEL_OPTION://Si das a "cancelar" en la ventana anterior muestra este mensaje.
                                    JOptionPane.showMessageDialog(this, "BÃºsqueda finalizada.");//Mensaje informativo.
                                    salir=true;
                                    break;
                            case JOptionPane.CLOSED_OPTION://Si cierras la ventana anterior muestra este mensaje.
                                    JOptionPane.showMessageDialog(this, "BÃºsqueda finalizada.");//Mensaje informativo.
                                    salir=true;
                                    break;
                    }
                    if(salir)
                    {
                       break;
                    }
                    else
                    {
                        auxBusqueda++;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay mas ventas que mostrar de ese cliente.", "ERROR.", JOptionPane.ERROR_MESSAGE);//Mensaje informativo.
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "No hay ventas que mostrar de ese cliente.", "ERROR.", JOptionPane.ERROR_MESSAGE);//Mensaje informativo.
            }
        }
        estadoInicial();
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        try{
            ventasGuardadas.get(0);
            int opcion=JOptionPane.showConfirmDialog(null, "Hay ventas guardadas, Â¿seguro que quiere salir?","Â¿Continuar?",JOptionPane.OK_CANCEL_OPTION);//Devuelve un valor entero segÃºn la opciÃ³n que escojamos de la ventana.
            switch(opcion)
                    {
                            case JOptionPane.OK_OPTION://Si das a "aceptar" en la ventana anterior muestra este mensaje.
                                    System.exit(0);//Sale del programa.
                                    break;
                            case JOptionPane.CANCEL_OPTION://Si das a "cancelar" en la ventana anterior muestra este mensaje.
                                    //No harÃ­a nada.
                                    estadoInicial();
                                    break;
                            case JOptionPane.CLOSED_OPTION://Si cierras la ventana anterior muestra este mensaje.
                                    estadoInicial();
                                    //No harÃ­a nada.
                                    break;
                    }
        }catch(Exception e){
            System.exit(0);//Sale del programa.
        }
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        jTextFieldNombreCliente.setText("");
        estadoInicial();//Vuelve al estado inicial.
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jListClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClientesMouseClicked
        // TODO add your handling code here:
        if(!ventasGuardadas.isEmpty())
        {
            jButtonEliminar.setEnabled(true);
            jButtonAnadir.setEnabled(false);
            jButtonBuscar.setEnabled(false);
            String nombre=jListClientes.getSelectedValuesList().toString();
            nombre = nombre.replace("[","");
            nombre = nombre.replace("]","");
            jTextFieldNombreCliente.setText(nombre);
                try{
                    if(ventasGuardadas.get(jListClientes.getSelectedIndex()).getNombreCliente().equals(nombre)){
                    pintaVenta(ventasGuardadas.get(jListClientes.getSelectedIndex()));
                }
                }catch(Exception e){
                    
                }
        }
    }//GEN-LAST:event_jListClientesMouseClicked

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        pintaVenta(ventasGuardadas.get(jListClientes.getSelectedIndex()));
        int opcion=JOptionPane.showConfirmDialog(null, "Â¿Seguro que quiere eliminar esa venta?","Â¿Continuar?",JOptionPane.OK_CANCEL_OPTION);//Devuelve un valor entero segÃºn la opciÃ³n que escojamos de la ventana.
        switch(opcion)
        {
                case JOptionPane.OK_OPTION://Si das a "aceptar" en la ventana anterior borra venta y  muestra mensaje.
                        ventasGuardadas.remove(jListClientes.getSelectedIndex());
                        jListClientes.setListData(actualizarListaClientes(null));
                        estadoInicial();
                        break;
                case JOptionPane.CANCEL_OPTION://Si das a "cancelar" en la ventana anterior muestra este mensaje.
                        JOptionPane.showMessageDialog(this, "EliminaciÃ³n cancelada.");//Mensaje informativo.
                        estadoInicial();
                        break;
                case JOptionPane.CLOSED_OPTION://Si cierras la ventana anterior muestra este mensaje.
                        JOptionPane.showMessageDialog(this, "EliminaciÃ³n cancelada.");//Mensaje informativo.
                        estadoInicial();
                        break;
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jTextFieldNombreClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNombreClienteMouseClicked
        // TODO add your handling code here:
        estadoInicial();
    }//GEN-LAST:event_jTextFieldNombreClienteMouseClicked

    private void jButtonMostrarVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarVActionPerformed
        // TODO add your handling code here:
        try{
            ficheroVacio();//Comprueba si el fichero estÃ¡ vacÃ­o.
            mostrarVolcadoF();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "No hay ventas guardadas en el fichero.", "ERROR.", JOptionPane.ERROR_MESSAGE);//Mensaje informativo.
        }
        jTextFieldNombreCliente.grabFocus();
    }//GEN-LAST:event_jButtonMostrarVActionPerformed

    private void jButtonGuardarVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarVActionPerformed
        // TODO add your handling code here:
        if(ventasGuardadas.isEmpty()){
            JOptionPane.showMessageDialog(this, "No hay ventas que guardar.", "ERROR.", JOptionPane.ERROR_MESSAGE);//Mensaje informativo.
            estadoInicial2();
        }
        else{
            try{
                guardarVentas();
                ventasGuardadas.clear();
                String [] listaBorrada = new String[ventasGuardadas.size()];
                jListClientes.setListData(listaBorrada);
                estadoInicial2();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error al guardar en fichero.");//Mensaje informativo.    
            }
        }
        jTextFieldNombreCliente.grabFocus();
    }//GEN-LAST:event_jButtonGuardarVActionPerformed

    private void jListClientesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListClientesKeyReleased
        // TODO add your handling code here:
        if(!ventasGuardadas.isEmpty())
        {
            jButtonEliminar.setEnabled(true);
            jButtonAnadir.setEnabled(false);
            jButtonBuscar.setEnabled(false);
            String nombre=jListClientes.getSelectedValuesList().toString();
            nombre = nombre.replace("[","");
            nombre = nombre.replace("]","");
            jTextFieldNombreCliente.setText(nombre);
                try{
                    if(ventasGuardadas.get(jListClientes.getSelectedIndex()).getNombreCliente().equals(nombre)){
                    pintaVenta(ventasGuardadas.get(jListClientes.getSelectedIndex()));
                }
                }catch(Exception e){
                    
                }
        }
    }//GEN-LAST:event_jListClientesKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentaOrdenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentaOrdenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentaOrdenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentaOrdenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentaOrdenadores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDiscoDuro;
    private javax.swing.ButtonGroup buttonGroupMemoria;
    private javax.swing.ButtonGroup buttonGroupMonitor;
    private javax.swing.ButtonGroup buttonGroupProcesador;
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardarV;
    private javax.swing.JButton jButtonMostrarV;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JCheckBox jCheckBoxBackupRestore;
    private javax.swing.JCheckBox jCheckBoxGrabadora;
    private javax.swing.JCheckBox jCheckBoxSintonizador;
    private javax.swing.JCheckBox jCheckBoxWifi;
    private javax.swing.JComboBox jComboBoxLocalidad;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelListaClientes;
    private javax.swing.JLabel jLabelLocalidad;
    private javax.swing.JLabel jLabelMemoria;
    private javax.swing.JLabel jLabelMonitor;
    private javax.swing.JLabel jLabelNombreCliente;
    private javax.swing.JLabel jLabelOpciones;
    private javax.swing.JLabel jLabelProcesador;
    private javax.swing.JList jListClientes;
    private javax.swing.JRadioButton jRadioButtonDis1;
    private javax.swing.JRadioButton jRadioButtonDis2;
    private javax.swing.JRadioButton jRadioButtonDis3;
    private javax.swing.JRadioButton jRadioButtonDis4;
    private javax.swing.JRadioButton jRadioButtonMem1;
    private javax.swing.JRadioButton jRadioButtonMem2;
    private javax.swing.JRadioButton jRadioButtonMem3;
    private javax.swing.JRadioButton jRadioButtonMem4;
    private javax.swing.JRadioButton jRadioButtonMon1;
    private javax.swing.JRadioButton jRadioButtonMon2;
    private javax.swing.JRadioButton jRadioButtonMon3;
    private javax.swing.JRadioButton jRadioButtonMon4;
    private javax.swing.JRadioButton jRadioButtonProc1;
    private javax.swing.JRadioButton jRadioButtonProc2;
    private javax.swing.JRadioButton jRadioButtonProc3;
    private javax.swing.JRadioButton jRadioButtonProc4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNombreCliente;
    // End of variables declaration//GEN-END:variables
    

    public void estadoInicial(){
        //Se deshabilita todo menos JTextFieldNombreCliente, JListClientes, JButtonCancelar y JButtonSalir.
        jTextFieldNombreCliente.setText("");
        jButtonAnadir.setEnabled(false);
        jButtonEliminar.setEnabled(false);
        jButtonBuscar.setEnabled(false);
        jRadioButtonDis1.setEnabled(false);
        jRadioButtonDis2.setEnabled(false);
        jRadioButtonDis3.setEnabled(false);
        jRadioButtonDis4.setEnabled(false);
        jRadioButtonMem1.setEnabled(false);
        jRadioButtonMem2.setEnabled(false);
        jRadioButtonMem3.setEnabled(false);
        jRadioButtonMem4.setEnabled(false);
        jRadioButtonMon1.setEnabled(false);
        jRadioButtonMon2.setEnabled(false);
        jRadioButtonMon3.setEnabled(false);
        jRadioButtonMon4.setEnabled(false);
        jRadioButtonProc1.setEnabled(false);
        jRadioButtonProc2.setEnabled(false);
        jRadioButtonProc3.setEnabled(false);
        jRadioButtonProc4.setEnabled(false);
        jComboBoxLocalidad.setEnabled(false);
        jCheckBoxBackupRestore.setEnabled(false);
        jCheckBoxGrabadora.setEnabled(false);
        jCheckBoxSintonizador.setEnabled(false);
        jCheckBoxWifi.setEnabled(false);
        //JTextFieldNombreCliente toma el foco.
        jTextFieldNombreCliente.grabFocus();
        //Mostramos una cofiguraciÃ³n estÃ¡ndar respecto a los ButtonGroup del interfaz y su contenido y los JCheckBox.
        jRadioButtonProc2.setSelected(true);
        jRadioButtonDis4.setSelected(true);
        jRadioButtonMem4.setSelected(true);
        jRadioButtonMon4.setSelected(true);
        jCheckBoxGrabadora.setSelected(true);
        jCheckBoxWifi.setSelected(true);
        jCheckBoxSintonizador.setSelected(false);
        jCheckBoxBackupRestore.setSelected(false);
        jComboBoxLocalidad.setSelectedIndex(0);
    }
    
    public void estadoInicial2(){
        //Se deshabilita todo menos JTextFieldNombreCliente, JListClientes, JButtonCancelar y JButtonSalir.
        jTextFieldNombreCliente.setText("");
        jButtonAnadir.setEnabled(false);
        jButtonEliminar.setEnabled(false);
        jButtonBuscar.setEnabled(false);
        jRadioButtonDis1.setEnabled(false);
        jRadioButtonDis2.setEnabled(false);
        jRadioButtonDis3.setEnabled(false);
        jRadioButtonDis4.setEnabled(false);
        jRadioButtonMem1.setEnabled(false);
        jRadioButtonMem2.setEnabled(false);
        jRadioButtonMem3.setEnabled(false);
        jRadioButtonMem4.setEnabled(false);
        jRadioButtonMon1.setEnabled(false);
        jRadioButtonMon2.setEnabled(false);
        jRadioButtonMon3.setEnabled(false);
        jRadioButtonMon4.setEnabled(false);
        jRadioButtonProc1.setEnabled(false);
        jRadioButtonProc2.setEnabled(false);
        jRadioButtonProc3.setEnabled(false);
        jRadioButtonProc4.setEnabled(false);
        jComboBoxLocalidad.setEnabled(false);
        jCheckBoxBackupRestore.setEnabled(false);
        jCheckBoxGrabadora.setEnabled(false);
        jCheckBoxSintonizador.setEnabled(false);
        jCheckBoxWifi.setEnabled(false);
        //Mostramos una cofiguraciÃ³n estÃ¡ndar respecto a los ButtonGroup del interfaz y su contenido y los JCheckBox.
        jRadioButtonProc2.setSelected(true);
        jRadioButtonDis4.setSelected(true);
        jRadioButtonMem4.setSelected(true);
        jRadioButtonMon4.setSelected(true);
        jCheckBoxGrabadora.setSelected(true);
        jCheckBoxWifi.setSelected(true);
        jCheckBoxSintonizador.setSelected(false);
        jCheckBoxBackupRestore.setSelected(false);
        jComboBoxLocalidad.setSelectedIndex(0);
    }
    
    public void estadoInicial3(){
        //Se deshabilita todo menos JTextFieldNombreCliente, JListClientes, JButtonCancelar y JButtonSalir.
        jTextFieldNombreCliente.setText("");
        jButtonAnadir.setEnabled(false);
        jButtonEliminar.setEnabled(false);
        jButtonBuscar.setEnabled(false);
        jRadioButtonDis1.setEnabled(false);
        jRadioButtonDis2.setEnabled(false);
        jRadioButtonDis3.setEnabled(false);
        jRadioButtonDis4.setEnabled(false);
        jRadioButtonMem1.setEnabled(false);
        jRadioButtonMem2.setEnabled(false);
        jRadioButtonMem3.setEnabled(false);
        jRadioButtonMem4.setEnabled(false);
        jRadioButtonMon1.setEnabled(false);
        jRadioButtonMon2.setEnabled(false);
        jRadioButtonMon3.setEnabled(false);
        jRadioButtonMon4.setEnabled(false);
        jRadioButtonProc1.setEnabled(false);
        jRadioButtonProc2.setEnabled(false);
        jRadioButtonProc3.setEnabled(false);
        jRadioButtonProc4.setEnabled(false);
        jComboBoxLocalidad.setEnabled(false);
        jCheckBoxBackupRestore.setEnabled(false);
        jCheckBoxGrabadora.setEnabled(false);
        jCheckBoxSintonizador.setEnabled(false);
        jCheckBoxWifi.setEnabled(false);
        //Mostramos una cofiguraciÃ³n estÃ¡ndar respecto a los ButtonGroup del interfaz y su contenido y los JCheckBox.
        jRadioButtonProc2.setSelected(true);
        jRadioButtonDis4.setSelected(true);
        jRadioButtonMem4.setSelected(true);
        jRadioButtonMon4.setSelected(true);
        jCheckBoxGrabadora.setSelected(true);
        jCheckBoxWifi.setSelected(true);
        jCheckBoxSintonizador.setSelected(false);
        jCheckBoxBackupRestore.setSelected(false);
        jComboBoxLocalidad.setSelectedIndex(0);
    }
    
    public void estadoPostNombreClienteCorrecto(){
        //Se habilita todo lo que estaba deshabilitado tras llamar a estadoInicial() menos JButtonEliminar.
        jButtonAnadir.setEnabled(true);
        jButtonBuscar.setEnabled(true);
        jRadioButtonDis1.setEnabled(true);
        jRadioButtonDis2.setEnabled(true);
        jRadioButtonDis3.setEnabled(true);
        jRadioButtonDis4.setEnabled(true);
        jRadioButtonMem1.setEnabled(true);
        jRadioButtonMem2.setEnabled(true);
        jRadioButtonMem3.setEnabled(true);
        jRadioButtonMem4.setEnabled(true);
        jRadioButtonMon1.setEnabled(true);
        jRadioButtonMon2.setEnabled(true);
        jRadioButtonMon3.setEnabled(true);
        jRadioButtonMon4.setEnabled(true);
        jRadioButtonProc1.setEnabled(true);
        jRadioButtonProc2.setEnabled(true);
        jRadioButtonProc3.setEnabled(true);
        jRadioButtonProc4.setEnabled(true);
        jComboBoxLocalidad.setEnabled(true);
        jCheckBoxBackupRestore.setEnabled(true);
        jCheckBoxGrabadora.setEnabled(true);
        jCheckBoxSintonizador.setEnabled(true);
        jCheckBoxWifi.setEnabled(true);
        jButtonEliminar.setEnabled(false);
        //jComboBoxLocalidad toma el foco.
        jComboBoxLocalidad.grabFocus();
    }
    
    //MÃ©todo que va mostrando el contenido de un fichero.
    public void mostrarVolcadoF() throws Exception{
        volcadoFichero();
        pintaVenta2(listaAuxiliar.get(0));
        if(listaAuxiliar.size()>1)
        {
           boolean salir=false;
           for(int i=1;i<listaAuxiliar.size();i++){
                int opcion=JOptionPane.showConfirmDialog(null, "Hay mÃ¡s ventas guardadas,Â¿quiere mostrar la siguiente? Si sale de la ventana serÃ¡ como si hubiera pulsado 'Cancelar'.","Â¿Continuar?",JOptionPane.OK_CANCEL_OPTION);//Devuelve un valor entero segÃºn la opciÃ³n que escojamos de la ventana.
                switch(opcion)
                {
                    case JOptionPane.OK_OPTION://Si das a "aceptar" sigue con el bucle.

                            break;
                    case JOptionPane.CANCEL_OPTION://Si das a "cancelar" en la ventana anterior muestra este mensaje.
                            JOptionPane.showMessageDialog(this, "Mostrado de datos interrumpido.");//Mensaje informativo.
                            estadoInicial();
                            salir=true;
                            break;
                    case JOptionPane.CLOSED_OPTION://Si cierras la ventana anterior muestra este mensaje.
                            JOptionPane.showMessageDialog(this, "Mostrado de datos interrumpido.");//Mensaje informativo.
                            estadoInicial();
                            salir=true;
                            break;
                }
                if(salir){
                    break;
                }
                pintaVenta2(listaAuxiliar.get(i));
            }
           if(!salir){
               JOptionPane.showMessageDialog(this, "No hay mÃ¡s ventas guardadas. Fin de mostrado de datos.");//Mensaje informativo.
               estadoInicial();
           }
        }
        else{
            JOptionPane.showMessageDialog(this, "Solo hay una venta guardada. Fin de mostrado de ventas.");//Mensaje informativo.
            estadoInicial();
        }
        listaAuxiliar.clear();
    }
    
    //MÃ©todo que mete el contenido del fichero en 
    public void volcadoFichero() throws FileNotFoundException, IOException{
        BufferedReader br = new BufferedReader(new FileReader(f));
        String cadena = br.readLine();
        while(cadena!=null){
            String [] splitter = cadena.split(";");
            listaAuxiliar.add(new Venta(splitter[0],
                    Integer.valueOf(splitter[1]),
                    splitter[2],
                    splitter[3],
                    splitter[4],
                    splitter[5],
                    devuelveIntegerABooleano(Integer.valueOf(splitter[6])),
                    devuelveIntegerABooleano(Integer.valueOf(splitter[7])),
                    devuelveIntegerABooleano(Integer.valueOf(splitter[8])),
                    devuelveIntegerABooleano(Integer.valueOf(splitter[9]))));
            cadena = br.readLine();
        }
        br.close();
    }
    
    //MÃ©todo auxiliar del volcado de datos desde fichero.
    public boolean devuelveIntegerABooleano(int num){
        if(num==1){
            return true;
        }else{
            return false;
        }
    }
    
    //MÃ©todo que comprueba si el fichero estÃ¡ vacÃ­o.
    public void ficheroVacio() throws Exception{
        //Te crea el fichero si no existe.
        PrintWriter pw = new PrintWriter(new FileWriter(f,true));
        pw.close();
        //Luego comprueba si estÃ¡ vacÃ­o o no. Si lo estÃ¡ devolverÃ¡ una excepciÃ³n.
        BufferedReader br = new BufferedReader(new FileReader(f));
        String cadena = br.readLine();
        if(cadena==null){
            throw new Exception("Fichero vacÃ­o");
        }
        br.close();
    }
    
    //MÃ©todo que guarda las ventas del programa en el fichero.
    public void guardarVentas() throws IOException{
        String cadena;
        PrintWriter pw = new PrintWriter(new FileWriter(f,true));
        for(int i=0; i< ventasGuardadas.size();i++){
            cadena=ventasGuardadas.get(i).getNombreCliente()+";"+ventasGuardadas.get(i).getLocalidad()+";"+ventasGuardadas.get(i).getProcesador()+";"+ventasGuardadas.get(i).getMemoria()+";"+ventasGuardadas.get(i).getMonitor()+";"+ventasGuardadas.get(i).getDiscoDuro();
            if(ventasGuardadas.get(i).isGrabadora()){
                cadena=cadena+";"+1;
            }
            else{
                cadena=cadena+";"+0;
            }
            if(ventasGuardadas.get(i).isWifi()){
                cadena=cadena+";"+1;
            }
            else
            {
                cadena=cadena+";"+0;
            }
            if(ventasGuardadas.get(i).isSintonizador()){
                 cadena=cadena+";"+1;
            }
            else{
                cadena=cadena+";"+0;
            }
            if(ventasGuardadas.get(i).isBackup()){
                cadena=cadena+";"+1;
            }
            else{
                cadena=cadena+";"+0;
            }
            pw.println(cadena);
        }
        pw.close();
    }
    
    //MÃ©todo que pone todos los valores del formulario iguales a los que una vez estaban elegidos cuando se guardÃ³ la venta que se recibe por parÃ¡metro.
    public void pintaVenta(Venta v){
        jComboBoxLocalidad.setSelectedIndex(v.getLocalidad());
        pintaButtonGroup(v);
        pintaCheckBox(v);
    }
    
    //MÃ©todo que pone todos los valores del formulario iguales a los que una vez estaban elegidos cuando se guardÃ³ la venta que se recibe por parÃ¡metro.
    public void pintaVenta2(Venta v){
        jTextFieldNombreCliente.setText(v.getNombreCliente());
        jComboBoxLocalidad.setSelectedIndex(v.getLocalidad());
        pintaButtonGroup(v);
        pintaCheckBox(v);
    }
    
    //MÃ©todo que pone los valores del formularios respectivos a las JCheckBox iguales a los que una vez estaban elegidos cuando se guardÃ³ la venta que se recibe por parÃ¡metro.
    public void pintaCheckBox(Venta v){
        if(v.isGrabadora())
        {
            jCheckBoxGrabadora.setSelected(true);
        }
        else
        {
            jCheckBoxGrabadora.setSelected(false);
        }
        if(v.isBackup())
        {
            jCheckBoxBackupRestore.setSelected(true);
        }
        else
        {
            jCheckBoxBackupRestore.setSelected(false);
        }
        if(v.isSintonizador())
        {
            jCheckBoxSintonizador.setSelected(true);
        }
        else
        {
            jCheckBoxSintonizador.setSelected(false);
        }
        if(v.isWifi())
        {
            jCheckBoxWifi.setSelected(true);
        }
        else
        {
            jCheckBoxWifi.setSelected(false);
        }
    }
    
    
    public boolean masDeUno(String cadena){
        int cont=0;
        for(int i=0; i< ventasGuardadas.size();i++)
        {
            if(ventasGuardadas.get(i).getNombreCliente().equals(cadena)){
                cont++;
                if(cont>1){
                    return true;
                }
            }
        }
        return false;
    }
    
    //MÃ©todo que pone los valores del formularios respectivos a los ButtonGroups de JRadioButton iguales a los que una vez estaban elegidos cuando se guardÃ³ la venta que se recibe por parÃ¡metro.
    public void pintaButtonGroup(Venta v)
    {
        switch(v.getProcesador())
        {
            case "1":
                    jRadioButtonProc1.setSelected(true);
                    break;
            case "2":
                    jRadioButtonProc2.setSelected(true);
                    break;
            case "3":
                    jRadioButtonProc3.setSelected(true);
                    break;
            case "4":
                    jRadioButtonProc4.setSelected(true);
                    break;
        }
        switch(v.getMemoria())
        {
            case "1":
                    jRadioButtonMem1.setSelected(true);
                    break;
            case "2":
                    jRadioButtonMem2.setSelected(true);
                    break;
            case "3":
                    jRadioButtonMem3.setSelected(true);
                    break;
            case "4":
                    jRadioButtonMem4.setSelected(true);
                    break;
        }
        switch(v.getMonitor())
        {
            case "1":
                    jRadioButtonMon1.setSelected(true);
                    break;
            case "2":
                    jRadioButtonMon2.setSelected(true);
                    break;
            case "3":
                    jRadioButtonMon3.setSelected(true);
                    break;
            case "4":
                    jRadioButtonMon4.setSelected(true);
                    break;
        }
        switch(v.getDiscoDuro())
        {
            case "1":
                    jRadioButtonDis1.setSelected(true);
                    break;
            case "2":
                    jRadioButtonDis2.setSelected(true);
                    break;
            case "3":
                    jRadioButtonDis3.setSelected(true);
                    break;
            case "4":
                    jRadioButtonDis4.setSelected(true);
                    break;
        }
    }
    
    //MÃ©todo que busca una venta en "ventasGuardadas" por nombre
    public Venta dameVentaCliente(String nombreCliente,int ocasion) throws Exception{
        int aux=0;
        for(int i=0;i<ventasGuardadas.size();i++)
        {
            if(ventasGuardadas.get(i).getNombreCliente().equals(nombreCliente))
            {
                if(aux==ocasion)
                {
                    return ventasGuardadas.get(i);
                }
                else
                {
                    aux++;
                }
            }
        }
        throw new Exception("No encontrada");
    }
    
    
    //MÃ©todo que aÃ±ade una nueva Venta a "ventasGuardadas" y devuelve una lista de Clientes para jListClientes.
    public String[] actualizarListaClientes(String nuevoCliente){
        //Se aÃ±ade la nueva Venta a "ventasGuardadas" basÃ¡ndonos en las selecciones del formulario.
        if(nuevoCliente!=null)
        {
            ventasGuardadas.add(new Venta(nuevoCliente,jComboBoxLocalidad.getSelectedIndex(),devolverProcesadorEscogido(),devolverMemoriaEscogida(),devolverMonitorEscogido(),devolverDiscoDuroEscogido(),jCheckBoxGrabadora.isSelected(),jCheckBoxWifi.isSelected(),jCheckBoxSintonizador.isSelected(), jCheckBoxBackupRestore.isSelected()));
        }
        //Se crea un array de String para almacenar el nombre de los clientes.
        String [] listaActualizada = new String[ventasGuardadas.size()];
        //Guardamos los nombres de los clientes que han hecho una venta en el array de String declarado anteriormente.
        for(int i=0; i<ventasGuardadas.size();i++)
        {
            listaActualizada[i]=ventasGuardadas.get(i).getNombreCliente();
        }
        //Devolvemos la lista de clientes.
        return listaActualizada;
    }
    
    //MÃ©todo que devuelve un String en relaciÃ³n al jRadioButton seleccionado en buttonGroupProcesador.
    public String devolverProcesadorEscogido()
    {
        if(jRadioButtonProc1.isSelected())
        {
            return "1";
        }
        if(jRadioButtonProc2.isSelected())
        {
            return "2";
        }
        if(jRadioButtonProc3.isSelected())
        {
            return "3";
        }
        if(jRadioButtonProc4.isSelected())
        {
            return "4";
        }
        return "";//LÃ­nea "fantasma", se escribe para que no nos seÃ±ale un error el entorno. Pero es imposible llegar a ella.
    }
    
    //MÃ©todo que devuelve un String en relaciÃ³n al jRadioButton seleccionado en buttonGroupMemoria.
    public String devolverMemoriaEscogida()
    {
        if(jRadioButtonMem1.isSelected())
        {
            return "1";
        }
        if(jRadioButtonMem2.isSelected())
        {
            return "2";
        }
        if(jRadioButtonMem3.isSelected())
        {
            return "3";
        }
        if(jRadioButtonMem4.isSelected())
        {
            return "4";
        }
        return "";//LÃ­nea "fantasma", se escribe para que no nos seÃ±ale un error el entorno. Pero es imposible llegar a ella.
    }
    
    //MÃ©todo que devuelve un String en relaciÃ³n al jRadioButton seleccionado en buttonGroupMonitor.
    public String devolverMonitorEscogido()
    {
        if(jRadioButtonMon1.isSelected())
        {
            return "1";
        }
        if(jRadioButtonMon2.isSelected())
        {
            return "2";
        }
        if(jRadioButtonMon3.isSelected())
        {
            return "3";
        }
        if(jRadioButtonMon4.isSelected())
        {
            return "4";
        }
        return "";//LÃ­nea "fantasma", se escribe para que no nos seÃ±ale un error el entorno. Pero es imposible llegar a ella.
    }
    
    //MÃ©todo que devuelve un String en relaciÃ³n al jRadioButton seleccionado en buttonGroupDiscoDuro.
    public String devolverDiscoDuroEscogido()
    {
        if(jRadioButtonDis1.isSelected())
        {
            return "1";
        }
        if(jRadioButtonDis2.isSelected())
        {
            return "2";
        }
        if(jRadioButtonDis3.isSelected())
        {
            return "3";
        }
        if(jRadioButtonDis4.isSelected())
        {
            return "4";
        }
        return "";//LÃ­nea "fantasma", se escribe para que no nos seÃ±ale un error el entorno. Pero es imposible llegar a ella.
    }
}